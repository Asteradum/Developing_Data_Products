A <- matrix(2,1,1,2)
A
?"matrix"
A <- matrix(data = c(2,1,1,2), 2,2)
A
is.positive.definite(A)
install.packages("matrixcalc")
library(matrixcalc)
A <- matrix(data = c(2,1,1,2), 2,2)
is.positive.definite(A)
?transpose
At <- t(A)
At
svd(A)
Cholesky(A)
Cholesky(A)
chol(A)
B * t(B)
B <- chol(A)
B * t(B)
B <- chol(A, pivot = FALSE, ...)
B <- chol(A, pivot = FALSE)
B * t(B)
B <- chol(A, pivot = T)
B * t(B)
B %*%  t(B)
B <- chol(A, pivot = F)
View(B)
t(B)
B %*%  B
B
t(B)
B %*%  t(B)
B *  t(B)
B%*%A
C<-matrix(data = c(2,0,0,6,1,0,-8,5,3), 3,3)
View(C)
C<-matrix(data = c(2,6,-8,0,1,5,0,0,3), 3,3)
View(C)
t(C)
C %*% t(C)
D <- C %*% t(C)
chol(D)
is.positive.semi.definite(A)
Conj(t(B))
B %*%  Conj(t(B))
B %*%  t(B)
Conj(t(A))
Act <- Conj(t(A))
A=Act
A==Act
identical(A, Act)
identical(A, At) #Hermitian
?is.positive.definite
func(is.positive.definite)
getMethod(is.positive.definite)
getMethod("is.positive.definite")
showMethods("is.positive.definite")
is.positive.definite
svd(A)
z <- svd(A)
z[1]
z[2] %*% t(z[2])
class(z[2])
class(z[[2])
class(z[[2]])
z[[2]] %*% t(z[[2]])
install.packages("shiny")
unApp("ShinyApp")
library(shiny)
unApp("ShinyApp")
setwd("~/Coursera/Developing_Data_Products/ShinyApp")
setwd("~/Coursera/Developing_Data_Products/ShinyApp")
unApp("ShinyApp")
RunApp("ShinyApp")
runApp("ShinyApp")
setwd("~/Coursera/Developing_Data_Products")
runApp("ShinyApp")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
??github
library(devtools)
install.packages("devtools")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
author("asteradum")
library(slidify)
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install.packages("C:/Users/User/Downloads/slidify-master.zip", repos = NULL, type = "win.binary")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install.packages("stringi")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
author("asteradum")
library(slidify)
author("asteradum")
slidify("index.Rmd")
